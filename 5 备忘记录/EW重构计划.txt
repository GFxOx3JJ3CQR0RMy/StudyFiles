EW 重构计划
	BaseAPI.h  BaseAPI.c
		socket :
			api_socket_init_env()  
				// 初始化socket环境
			api_socket_connect(char *url,int port)
			api_socket_init_server(int port,int maxlisten)
				
			api_socket_send(int sock,char *buf,int buflen) 
				// 发送数据
			api_socket_recv(int sock,char *buf,int buflen)
			api_socket_close()
			api_socket_read_state(int sock,int sec,int usec)
			api_socket_write_state(int sock,int sec,int usec)

			api_getsock_opt(int sock);
		thread :
			api_thread_create(thread_id,NULL,p_function,p_data)
			api_thread_detach(pthread_self())
		math :
			api_itochar(int a,char b,int len)
			api_chartoi(char *b,int len)
			
	Sock_Tunnel.h  Sock_Tunnel.c
		int tunn_init_Pool()
		int tunn_clean(int num)
		int tunn_close(int num)
		void * tunn_run_now(void *p_num)

		int tunn_get_pool_id_and_lock_it()
		int tunn_set_first_pool_and_lock_it(int sock,int usec)
		int tunn_set_second_pool_and_run_it(int pool_num,int sock)
		
		int tunn_sock_to_sock(int from_sock,int to_sock,int usec)

	SocksBase.h  SocksBase.c
		int socks_build_target_socket(int cmd_sock)
			// 从cmd_sock获取被访问目标的ip地址和端口，并建立socket返回。
			// 实现socks5协议后，可以完善 sock4协议。
		void *socks_check_and_tunnel(void *sock)
			//  解析socks协议，并完成代理功能。
			//  直接供 rssocks 和 ssocksd 两个模块使用。
	Lcx_Base.h   Lcx_Base.c
		int lcx_listen(int from_port,int cmd_port,int usec)
			from_port <---> to_port 
		int lcx_tran(int from_port,char *to_host,int to_port,int usec)
			from_port <---> [ to_host:to_port ]
		int lcx_slave(char *from_host,int from_port,char *to_host,int to_port,int usec)
			[ from_host:from_port ] <---> [ to_host:to_port ]

	CMD_Protocol.h CMD_Protocol.c
		int proto_init_cmd_rcsocket(char *URL,int port)
			// 1. 向服务器 发送 连接请求
			// 2. 服务器 回复 OK消息
		int proto_get_rcsocket(char *URL,int port,int poolnum)
			// 1. 连接服务器并发送 pool_number
		int proto_init_cmd_server_for_rc(int port)
			// 1. 初始化时，监听一个端口，等待init_cmd_rcsocket的连接
			// 2. 当有cmd连接后，将cmd_sock上抛，随后等待被控机反向连接。
			// 3. 当有被控机连接时调用 understand_and_do_it(sock) 函数，解析协议并执行
		int proto_understand_and_do_it(sock)
			//  解析协议并执行具体的处理操作（当前版本只有绑定会话功能）。

	rcsocks_pro.h rcsocks_pro.c
		int create_rcsocks_server(int socks_port,int cmd_proto_port,int usec)
		    //  当有新的会话连接socks_port时，会通过 cmd_proto_port 向 rssocks 传递指令
	rssocks_pro.h rssocks_pro.c
		int create_rssocks_server(char *URL,int port,int usec)	
			//  从 rssocks 接受指令。
	ssocksd_pro.h  ssocksd_pro.c
		int create_ssocksd_server(int port,int usec)

	外围功能文件：
		generic.h    // 包含所有程序必要的头文件，并通过宏区分 *nux 和 win 平台的区别。
		EWmain.c     // 整个程序的主程序，工具的入口。

	程序中的数据结构：
		为反向连接时多线程数据传递而创立，client端必要结构。
			struct rcsocktul{
				char *URL[300];
				int port;
				char poolnum;   
			}
		程序中的缓冲池，用于绑定两个sock数据流。
			typedef struct sspool{
				int sock_1;
				int sock_2;
				int flag;
				int state;
				int usec_time;
			}sockbind_s;
		好像在程序中对其进行了取缔
			typedef struct socketBind{
				int sock_1;
				int sock_2;
			}


	下一步要确定各关键函数的返回值 define。